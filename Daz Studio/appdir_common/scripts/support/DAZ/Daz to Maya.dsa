// DAZ Studio version 4.12.0.86 filetype DAZ Script
var isFBX = false
var figs = Scene.getSkeletonList();
// if (figs.length>0)
// 	isFBX = true
isFBX = true

function xValue(boneName) {
	var bone = figs[0].findBoneByLabel(boneName);
	cX = bone.getXRotControl();
	var xValue = cX.getValue();
	//print (":: get x :: " + boneName + " :: " + xValue);
	return xValue;
}

function setX(boneName, savedValue) {
	//print (":: set x :: " + boneName + " :: " + savedValue);
	var bone = figs[0].findBoneByLabel(boneName);
	cX = bone.getXRotControl();
	cX.setValue(savedValue);
}

function heelsFix() {
	//for (var fig_idx = 0; fig_idx != figs.length; ++ fig_idx) {
	//Left
	try { var xvalueLeftMetatarsals = xValue("Left Metatarsals"); } catch (error) { }
	try { var xvalueLeftHeel = xValue("Left Heel"); } catch (error) { }
	try { var xvalueLeftFoot = xValue("Left Foot"); } catch (error) { }
	try { var xvalueLeftToes = xValue("Left Toes"); } catch (error) { }
	try { var xvalueLeftBigToe = xValue("Left Big Toe"); } catch (error) { }
	try { var xvalueLeftBigToe2 = xValue("Left Big Toe_2"); } catch (error) { }
	try { var xvalueLeftSmallToe1 = xValue("Left Small Toe 1"); } catch (error) { }
	try { var xvalueLeftSmallToe12 = xValue("Left Small Toe 1_2"); } catch (error) { }
	try { var xvalueLeftSmallToe2 = xValue("Left Small Toe 2"); } catch (error) { }
	try { var xvalueLeftSmallToe22 = xValue("Left Small Toe 2_2"); } catch (error) { }
	try { var xvalueLeftSmallToe3 = xValue("Left Small Toe 3"); } catch (error) { }
	try { var xvalueLeftSmallToe32 = xValue("Left Small Toe 3_2"); } catch (error) { }
	try { var xvalueLeftSmallToe4 = xValue("Left Small Toe 4"); } catch (error) { }
	try { var xvalueLeftSmallToe42 = xValue("Left Small Toe 4_2"); } catch (error) { }

	//Right
	try { var xvalueRightMetatarsals = xValue("Right Metatarsals"); } catch (error) { }
	try { var xvalueRightHeel = xValue("Right Heel"); } catch (error) { }
	try { var xvalueRightFoot = xValue("Right Foot"); } catch (error) { }
	try { var xvalueRightToes = xValue("Right Toes"); } catch (error) { }
	try { var xvalueRightBigToe = xValue("Right Big Toe"); } catch (error) { }
	try { var xvalueRightBigToe2 = xValue("Right Big Toe_2"); } catch (error) { }
	try { var xvalueRightSmallToe1 = xValue("Right Small Toe 1"); } catch (error) { }
	try { var xvalueRightSmallToe12 = xValue("Right Small Toe 1_2"); } catch (error) { }
	try { var xvalueRightSmallToe2 = xValue("Right Small Toe 2"); } catch (error) { }
	try { var xvalueRightSmallToe22 = xValue("Right Small Toe 2_2"); } catch (error) { }
	try { var xvalueRightSmallToe3 = xValue("Right Small Toe 3"); } catch (error) { }
	try { var xvalueRightSmallToe32 = xValue("Right Small Toe 3_2"); } catch (error) { }
	try { var xvalueRightSmallToe4 = xValue("Right Small Toe 4"); } catch (error) { }
	try { var xvalueRightSmallToe42 = xValue("Right Small Toe 4_2"); } catch (error) { }

	Scene.selectAllNodes(0);
	figs[0].select(true);
	var mgr = MainWindow.getActionMgr();
	func = mgr.findAction("DzRestoreFigurePoseAction")
	func.trigger();

	var zeroValue = 0;

	//Left
	try { setX("Left Metatarsals", xvalueLeftMetatarsals); } catch (error) { }
	try { setX("Left Heel", zeroValue); } catch (error) { }
	//try { setX("Left Foot",xvalueLeftFoot);} catch (error ) {}
	try { setX("Left Toes", xvalueLeftToes); } catch (error) { }
	try { setX("Left Big Toe", xvalueLeftBigToe); } catch (error) { }
	try { setX("Left Big Toe_2", xvalueLeftBigToe2); } catch (error) { }
	try { setX("Left Small Toe 1", xvalueLeftSmallToe1); } catch (error) { }
	try { setX("Left Small Toe 1_2", xvalueLeftSmallToe12); } catch (error) { }
	try { setX("Left Small Toe 2", xvalueLeftSmallToe2); } catch (error) { }
	try { setX("Left Small Toe 2_2", xvalueLeftSmallToe22); } catch (error) { }
	try { setX("Left Small Toe 3", xvalueLeftSmallToe3); } catch (error) { }
	try { setX("Left Small Toe 3_2", xvalueLeftSmallToe32); } catch (error) { }
	try { setX("Left Small Toe 4", xvalueLeftSmallToe4); } catch (error) { }
	try { setX("Left Small Toe 4_2", xvalueLeftSmallToe42); } catch (error) { }
	//Right
	try { setX("Right Metatarsals", xvalueRightMetatarsals); } catch (error) { }
	try { setX("Right Heel", zeroValue); } catch (error) { }
	//try { setX("Right Foot",xvalueRightFoot);} catch (error ) {}
	try { setX("Right Toes", xvalueRightToes); } catch (error) { }
	try { setX("Right Big Toe", xvalueRightBigToe); } catch (error) { }
	try { setX("Right Big Toe_2", xvalueRightBigToe2); } catch (error) { }
	try { setX("Right Small Toe 1", xvalueRightSmallToe1); } catch (error) { }
	try { setX("Right Small Toe 1_2", xvalueRightSmallToe12); } catch (error) { }
	try { setX("Right Small Toe 2", xvalueRightSmallToe2); } catch (error) { }
	try { setX("Right Small Toe 2_2", xvalueRightSmallToe22); } catch (error) { }
	try { setX("Right Small Toe 3", xvalueRightSmallToe3); } catch (error) { }
	try { setX("Right Small Toe 3_2", xvalueRightSmallToe32); } catch (error) { }
	try { setX("Right Small Toe 4", xvalueRightSmallToe4); } catch (error) { }
	try { setX("Right Small Toe 4_2", xvalueRightSmallToe42); } catch (error) { }

	print("-----");
	//}
}

function convert2Prop( oSelectedNode )
{
 
	// If the selected node is a bone
	if( oSelectedNode.inherits( "DzBone" ) ){
		// Get the skeleton
		oSelectedNode = oSelectedNode.getSkeleton();
	}
 
	// If we don't have a skeleton
	if( !oSelectedNode.inherits( "DzSkeleton" ) ){
		return;
	}
 
	// Provide busy feedback to the user
	setBusyCursor();
 
	// Declare working variables
	var oNode, oParent;
 
	// Get the number of followers for the skeleton
	var nFollowers = oSelectedNode.getNumFollowSkeletons();
	// Presize an array to collect the converted nodes
	var aProps = new Array( nFollowers );
 
	// Iterate over the followers; reverse order,
	// the list will change with each conversion
	for( var i = nFollowers - 1; i >= 0; i -= 1 ){
		// Get the 'current' follower
		oNode = oSelectedNode.getFollowSkeleton( i );
		// Get the parent of the follower
		oParent = oNode.getNodeParent();
		// If we have a parent
		if( oParent ){
			// Unparent the follower, in place
			oParent.removeNodeChild( oNode, true );
		}
 
		// Convert the follower to a prop and collect it
		aProps[ i ] = oSelectedNode.convertFigureToProp( oNode, oNode.name );
	}
 
	// Create an array helper; to improve speed of resizing the array
	var oArrayHelper = new DzArrayHelper();
 
	// Get all of the child nodes of the figure
	var aNodes = oSelectedNode.getNodeChildren( true );
 
	// Iterate over the skeleton nodes
	for( var i = 0; i < aNodes.length; i += 1 ){
		oNode = aNodes[ i ];
		// If the node is not a bone; its some sort of 'prop'
		if( !oNode.inherits( "DzBone" ) ){
			// Get the parent of the node
			oParent = oNode.getNodeParent();
			// If we have a parent
			if( oParent ){
				// Unparent the prop, in place
				oParent.removeNodeChild( oNode, true );
				// Add the prop to the list
				aProps = oArrayHelper.addToArray( aProps, oNode );
			}
		}
	}
 
	// Convert the figure to a prop
	oSelectedNode = oSelectedNode.convertFigureToProp( oSelectedNode, oSelectedNode.name );
 
	// Iterate over the props
	for( var i = 0; i < aProps.length; i += 1 ){
		// Get the 'current' prop
		oNode = aProps[ i ];
		// Parent the prop to the figure, in place
		oSelectedNode.addNodeChild( oNode, true );
	}
 
	// Update the user
	clearBusyCursor();
}

function doesHavingSkeleton()
{
	for (i = 0; i < Scene.getNumNodes(); i++) {
		// Get the current node
		oNode = Scene.getNode(i);
		if( oNode.inherits( "DzSkeleton" ) )
			return true;
	}
	return false;
}

function doesHavingHip ()
{
	for (i = 0; i < Scene.getNumNodes(); i++) {
		// Get the current node
		oNode = Scene.getNode(i);
		if (oNode.getName().toLowerCase() == "hip")
			return true;
	}
	return false;
}

//start replaceInstance
var actionMgr = MainWindow.getActionMgr();
function doAction( nm )
{
	action = actionMgr.findAction( nm );
	action.trigger()
}

function replaceInstance( node, srcNode )
{
	var nodeparent = node.getNodeParent();
	Scene.selectAllNodes( false );

	node.select( true );
	doAction( "DzCopyNodeAction" );
	node.select( false );

	var nodez = Scene.getNodeList();
	var nn = nodez.length
		
	srcNode.select( true );
//	doAction( "DzDuplicateNodeHierarchyAction" );
	doAction( "DzDuplicateNodeAction" );
	srcNode.select( false );

	nodez = Scene.getNodeList();
	nunode = nodez[nn]
	
	if (nodeparent != null)
	{
		nodeparent.addNodeChild(nunode);
	}	

	nunode.select( true );
	doAction( "DzPasteNodeAction" );
	nunode.select( false );

	var ctl = nunode.getScaleControl();
	if( ctl.getValue() == 0 ) ctl.setValue( 1 );
	var ctl = nunode.getXScaleControl();
	if( ctl.getValue() == 0 ) ctl.setValue( 1 );
	var ctl = nunode.getYScaleControl();
	if( ctl.getValue() == 0 ) ctl.setValue( 1 );
	var ctl = nunode.getZScaleControl();
	if( ctl.getValue() == 0 ) ctl.setValue( 1 );
	

	Scene.removeNode( node );
}


function replaceInstanceAll()
{
	var listObjs = new Array();
	for (var i = 0; i <  Scene.getNumNodes(); i++) 
	{
		oNode = Scene.getNode(i);	
		try {
			//replace(oNode, oNode.getTarget());
			debug(oNode.getLabel()+":"+oNode.getTarget().getLabel());
			listObjs.push(oNode);
		}
		catch(error) {}
	}
	if (listObjs.length>0)
	{
		if( MessageBox.question( qsTr("Instances found, They need to be replaced before export. Replace them?\nUNDOABLE Operation (Save First if needed)"), qsTr("DazToMax"), qsTr("&Yes"), qsTr("&No") ) == 0 )
		{
			debug("yes");
			for (i = 0; i <  listObjs.length; i++) 
			{
				oNode = listObjs[i];	
				//debug(oNode.getLabel()+":"+oNode.getTarget().getLabel());
				try {
					replaceInstance(oNode, oNode.getTarget());
				}
				catch(error) {}
			}
		}	
	}

}
//end replaceInstance
replaceInstanceAll();
if (doesHavingSkeleton() == true) 
{
	if (doesHavingHip() == false)
	{
		var listNode = new Array();	
		for (i = 0; i < Scene.getNumNodes(); i++) {
			// Get the current node
			listNode.push (Scene.getNode(i));
			debug(oNode.getName())
		}
		if (listNode.length>0)
		{
			//if( MessageBox.question( qsTr("Some objects needs to be converted to props. Convert?\nUNDOABLE Operation (Save First if needed)"), qsTr("DazToMax"), qsTr("&Yes"), qsTr("&No") ) == 0 )
			//{
				for (i = 0; i < listNode.length; i++) {
					try { 	convert2Prop(listNode[i]) } catch (error) { }
				}
			//}
		}
	}
}

function exportDaz() {
	
	(function () {

		var oNode = Scene.getPrimarySelection();
		if (oNode) {
			var oSkeleton = oNode.getSkeleton();
			if (oSkeleton) {
				oNode = oSkeleton;
			}
		}

		var oExportMgr = App.getExportMgr();
		var sClassName = "DzFbxExporter";
		var oExporter = oExportMgr.findExporterByClassName(sClassName);
		if (isFBX == false)
		{
			n = oExportMgr.getNumExporters ()
			for (var i=0;i<n;i++)
			{
				var t = oExportMgr.getExporter(i)
				if (t.getExtension () == "dae")
				{
					debug(t.getExtension ())
					oExporter = t
				}
			}
						
		}

		if (oExporter) {
			var oSettings = new DzFileIOSettings();
			print(oSettings);
			print("***");
			var bShowOptions = false;
			var bOptionsBeforeFile = (bShowOptions && App.version64 >= 0x0004000900030016);
			if (!oExporter.getOptions(oSettings, bShowOptions && bOptionsBeforeFile, "")) {
				return;
			}
			if (isFBX)
			{
				
				oSettings.setBoolValue("doSelected", false);
				oSettings.setBoolValue("doVisible", false);
				oSettings.setBoolValue("doFigures", true);
				oSettings.setBoolValue("doProps", true);
				oSettings.setBoolValue("doLights", true);
				oSettings.setBoolValue("doCameras", true);
				oSettings.setBoolValue("doAnims", false);
				oSettings.setBoolValue("doMorphs", true);
	
				oSettings.setStringValue("rules", "head\n1");
				oSettings.setStringValue("format", "FBX 2012 -- Binary");
	
				// Embed Textures
				oSettings.setBoolValue("doEmbed", true);
				// Collect Textures To Folder
				oSettings.setBoolValue("doCopyTextures", false);
				// Merge Diffuse and Opacity Textures
				oSettings.setBoolValue("doDiffuseOpacity", false);
				// Merge Clothing Into Figure Skeleton
				oSettings.setBoolValue("doMergeClothing", true);
				// Convert Clothing to Static Geometry
				oSettings.setBoolValue("doStaticClothing", false);
				// Allow Degraded Skinning
				oSettings.setBoolValue("degradedSkinning", true);
				// Allow Degraded Scaling
				oSettings.setBoolValue("degradedScaling", true);
				// SubD Information
				oSettings.setBoolValue("doSubD", false);
				// Collapse UV Tiles
				oSettings.setBoolValue("doCollapseUVTiles", false);
			}
			else
			{
				//https://www.daz3d.com/forums/discussion/231971/silent-export-without-showing-options-and-without-showing-file-dialog
				oSettings.setBoolValue("doSelected", false);
				oSettings.setBoolValue("doVisible", false);
				oSettings.setBoolValue("doLights", true);
				oSettings.setBoolValue("doCameras", true);
	
				// Do not ignore the geometry of invisible nodes
				oSettings.setBoolValue( "IgnoreInvisible", false );
				// Do not remove vertices that are floating, connected to nothing - i.e. LOD		
				oSettings.setBoolValue( "RemoveUnusedVerts", false );
				// Set the scale to write the data
				oSettings.setFloatValue( "Scale", 1.0 );
				// Embed Textures
				oSettings.setBoolValue("doEmbed", true);
				// Collect Textures To Folder
				oSettings.setBoolValue("doCopyTextures", false);
				// Merge Diffuse and Opacity Textures
				oSettings.setBoolValue("doDiffuseOpacity", false);
				

			}

			// If the version is 4.9.3.22 or newer
			if (App.version64 >= 0x0004000900030016) {
				// Define whether or not to show the options after prompting for a file;
				// prior to 4.9.3.22 this exporter ignored this option entirely,
				// running silent was implied by virtue of being run via script
				oSettings.setIntValue("RunSilent", (bShowOptions && !bOptionsBeforeFile ? 1 : 1));
			}

			// Debug
			//print( oSettings.toJsonString() );

			// If we've got a node, construct the path using the
			// exporter's last path, the node's name, and the
			// exporter's extension...
			// Otherwise, just use the exporter's last path

			if (App.platform() == DzApp.MacOSX) {
				var oDir = new DzDir("/users/Shared/temp3d");
				oDir.mkdir("/users/Shared/temp3d");
				oExporter.writeFile("/users/Shared/temp3d/DazToMaya.fbx", oSettings);
			} else {
				var oDir = new DzDir("C:/TEMP3D");
				oDir.mkdir("C:/TEMP3D");
				oExporter.writeFile("C:/TEMP3D/DazToMaya.fbx", oSettings);
				print(oSettings);
			}

			// Clean up; don't leak memory
			oExporter.deleteLater();
			// We didn't find an exporter with the class name we wanted
		} else {
			// Inform the user
			MessageBox.critical(qsTr("An exporter with the class name \"%1\" " +
				"could not be found.").arg(sClassName),
				qsTr("Critical Error"), qsTr("&OK"));
		}
		// Finalize the function and invoke
	})();
}


// try {
// 	heelsFix();
// } catch (error) { }
// DAZ Studio version 4.12.0.86 filetype DAZ Script

for (i = 0; i < Scene.getNumNodes(); i++) {
	// Get the current node
	oNode = Scene.getNode(i);

	myTempObj = oNode.getObject();
	if (myTempObj != null && (oNode.inherits( "DzFigure" )== false )) {		
		pNode = oNode.getNodeParent()
		if (pNode != null)
		{
			pNode.removeNodeChild(oNode,inPlace=true)
			debug(oNode.getName())
		}
		//oNode.removeAllNodeChildren();
		
	}
	//position
	if ( oNode.getXPosControl() ) {
		oNode.getXPosControl().lock( true );
	}
	if ( oNode.getYPosControl() ) {
		oNode.getYPosControl().lock( true );
	}
	if ( oNode.getZPosControl() ) {
		oNode.getZPosControl().lock( true );
	}
	//scale
	if ( oNode.getXScaleControl() ) {
		oNode.getXScaleControl().lock( true );
	}
	if ( oNode.getYScaleControl() ) {
		oNode.getYScaleControl().lock( true );
	}
	if ( oNode.getZScaleControl() ) {
		oNode.getZScaleControl().lock( true );
	}
	//rotation
	if ( oNode.getXRotControl() ) {
		oNode.getXRotControl().lock( true );
	}
	if ( oNode.getYRotControl() ) {
		oNode.getYRotControl().lock( true );
	}
	if ( oNode.getZRotControl() ) {
	  oNode.getZRotControl().lock( true );
	}
	
}
exportDaz();


// ----------------------------------------------------------
// ----------------------------------------------------------
// ----------------------------------------------------------
// SAVE maps to file... bump, specular, etc....
// ----------------------------------------------------------


function label2Variable(label)
{
	var newlabel = label.toLowerCase()
	var alpha ='abcdefghijklmnopqrstuvwxyz0123456789_'
	var result = ''
	for (var i = 0; i < newlabel.length; i++) 
	{
		if (alpha.search(newlabel[i])>=0)
			result += label[i]
		if 	(newlabel[i] == ' ')
			result += '_'
	}
	if (result == "Luminance_cdm^2")
		result = "Luminance_cdm_2"
	return result
}
function fixFilename(filename)
{
	filename = filename.replace( "&", "(_)");
	return filename
}
function value2XMLString(mat,propLabel)
{
	try {
		var prop = mat.findPropertyByLabel(propLabel);
		propType = 1;
		//if (mat.getName() =='Walls')// && propLabel=='Diffuse Textture')
		//	debug('zzzzzzzzzzzzzzzzzzzzzzzzzzzzz '+propLabel)
		if (propLabel.search('Color') >=0) propType=2;
		if (prop != null) { 
			var objName = label2Variable(propLabel)
			var temp = ''
			//mat.getName() =='Walls' &&
			if ( propLabel=='Diffuse Texture')
			{
				//debug('12zzzzzzzzzzzzzzzzzzzzzzzzzzzzz '+propLabel+' '+prop.getValue())
				temp += ' Diffuse_Color_Map="'+fixFilename(prop.getValue().getFilename()) +'"';
			}
			else
			{

				if (prop.getMapValue()!= null)
					temp = objName+'_Map="'+fixFilename(prop.getMapValue().getFilename()) +'"';
	
				if (propType == 2){ 
					var color = prop.getColorValue();	
					temp += ' '+objName+'="Color '+color.red +' '+color.green +' '+ color.blue +'"';
				}	
				if (propType == 1){ 	
					temp += ' '+objName+'="'+prop.getValue() +'"';
				}
			}	
			return(temp);				
		}
	} catch (error) {
		return('')
	}
	return('');
}
function savePropertiesToFile() {
	var sFile;
	if (App.platform() == DzApp.MacOSX) {
		var sFile = '/users/Shared/temp3d/DazToMaya.xml'
	} else {
		var sFile = 'C:\\TEMP3D\\DazToMaya.xml'
	}
	
	var oConfigFile = new DzFile(sFile);
	oConfigFile.open(DzFile.WriteOnly);	
	
	if (isFBX) {
		oConfigFile.writeLine('<materials filename="DazToMaya.fbx" >');
	}
	else {
		oConfigFile.writeLine('<materials filename="DazToMaya.dae" >');
	}
	numI = Scene.getNumNodes();
	var i, j, k, numI, numIMat, numIShad;
	var oNode;
	var myTempObj;
	var myTempShape;
	var myWorkMat;
	var myWorkProperty;
	// Get the total number of scene nodes
	
	var listMat = new Array();
	// Iterate over each node
	var ii = 0;
	for (i = 0; i < numI; i++) {
		// Get the current node
		oNode = Scene.getNode(i);
		myTempObj = oNode.getObject();
		// does it have geometry?
		if (myTempObj != null) {
			myTempShape = myTempObj.getCurrentShape();
			// now digging for the materials!!
			numIMat = myTempShape.getNumMaterials();
			// iterating aaaagain
			for (j = 0; j < numIMat; j++) {
				myWorkMat = myTempShape.getMaterial(j);
				//debug(myWorkMat.getName()+' - '+ myWorkMat.getNumProperties());
				//var allMats = myWorkMat.getAllMaps();
				//var numMaps = allMats.length;
				var matName = myWorkMat.getName();
				var n = listMat.length;
				//listMat.pushIfNotExists(myTempObj.getName()+'-'+oNode.getLabel()+'-'+matName);
				listMat.pushIfNotExists(myTempObj.getName()+'-'+matName);
				var n1 = listMat.length;
				if (n1> n)
				{
					ii += 1;
					//debug(i+'/'+ii+'-'+myTempObj.getName()+'-'+matName)
					debug(i+'/'+ii+'-'+oNode.getLabel()+'-'+matName)
					var matText = '    <material object="'+label2Variable(myTempObj.getName())+'" label="'+oNode.getLabel()+ '" name="'+label2Variable(matName)+'"';
					if (isFBX)
						matText = '    <material object="'+myTempObj.getName()+'.Shape" label="'+oNode.getLabel()+ '" name="'+matName+'"';
					/*	
					var p = myWorkMat.findPropertyByLabel('Base Color');
					if (p != null) matText += ' shaderType="iray"'
					else 
					{
						p = myWorkMat.findPropertyByLabel('Metal Color');
						if (p != null) matText += ' shaderType="metal"'
						else
							matText += ' shaderType="3delight"'
					}
					*/
	
					for ( var k = 0; k < myWorkMat.getNumProperties(); k++ ) {
						var temp = value2XMLString(myWorkMat,myWorkMat.getProperty(k).getLabel());
						if (temp != '') matText += ' '+temp;
					//debug(i + ' '+myWorkMat.getProperty(i).getLabel()+ ' - '+myWorkMat.getProperty(i).getPath())
					}
					matText += '/>';
					oConfigFile.writeLine(matText);
				}
			}

		}
		//the second iteration is ended above
	}
	oConfigFile.writeLine('</materials>');
	oConfigFile.close();
}

savePropertiesToFile();

